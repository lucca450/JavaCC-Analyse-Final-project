/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;
  debug_parser = false;}PARSER_BEGIN(Grammaire)
import java.io.*;
import ast.*;
import java.util.Stack;
import java.util.ArrayList;
import java.util.List;
import java.lang.Math;
import java.util.Random;
import java.util.Hashtable;

public class Grammaire{
  static Stack stack = new Stack();
  static int uniqueID = 0;
  
  public static void main(String args []) throws ParseException  {    
    try {      
	    InputStream inputStream = new FileInputStream(new File("test.txt"));	    Grammaire parser = new Grammaire(inputStream);
	    parser.function();

		while(!stack.empty()) {
		
			Function myFunction = (Function)stack.pop();
	
			/*Boolean ok = false;
			while(!ok){
	        	BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)); 
	
	         	System.out.println("Voulez-vous afficher l'AST ? (o/n)");
	        	String answer = reader.readLine(); 
	
				ok = answer == "o" || answer == "n";
				if(!ok) {
					System.out.prinln("Entrée invalide");
				}
			}
			
			if(answer == "o") {*/
				//func.accept(new VisitorPrint());
			//}
			
			
			DataGenerator dG = new DataGenerator(func);
			
			ArrayList<Execution> executions = dG.GenerateData();
			Hashtable<Execution, Object> workedExecutions = new Hashtable<Execution, Object>();
	
			for(Execution e : executions) {
			 	Context context = dG.GenerateContext(e);
			 	context.setResultType(func.getType());
	
				func.interpret(context);
	
				if(!context.getHasError()) {
					workedExecutions.put(e, context.getResult());
				}
			}
		}
 	 } catch(IOException exception) {
		exception.printStackTrace();
 	 }  }}PARSER_END(Grammaire)
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

MORE :
{
	"//" : IN_SINGLE_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
  < ~[] >
}
TOKEN : /* OPERATEURS */{
  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >
| < MODULO : "%" >
| < ASSIGN : "=" >
| < EQUAL : "==" >
| < NOT_EQUAL : "<>" >
| < GREATER : ">" >
| < GREATER_OR_EQUAL : ">=" >
| < LOWER : "<" >
| < LOWER_OR_EQUAL : "<=" >
| < AND : "&&" >
| < OR : "||" >
| < NOT : "!" >
| < PREFIX_INCREMENT : "++" >
| < PREFIX_DECREMENT : "--" >}

TOKEN : /* MOTS CLÉS */
{
  < IF : "if" >
| < ELSE : "else" >
| < WHILE : "while" >
| < FOR : "for" > // A RETIRER
| < TRUE: "TRUE" >
| < FALSE : "FALSE" >
| < RETURN : "return" >
| < NEW : "new" >
}

TOKEN : /* TYPES */
{  < INTEGER_TYPE : "int" >
| < DECIMAL_TYPE : "double" >
| < BOOLEAN : "bool" >
| < VOID : "void" >
}TOKEN :	/* LITTERAUX */{
  < #DIGIT: ["0"-"9"] >
| < #LETTER : ["A"-"Z", "a" - "z"] >
| < INTEGER : ("-")? ( < DIGIT > )+ >
| < DECIMAL :
		("-")? (< DIGIT >)+ "." (< DIGIT >)*
	|  	("-")? (< DIGIT >)* "." (< DIGIT >)+
	>
| < IDENTIFIER : < LETTER > (< LETTER > | < DIGIT >)* >}

void function() :
{
  Token ident = null;
  Token f_type = null;
}
{
	(
		f_type = type() | f_type = < VOID > 
	)
	ident = < IDENTIFIER >
	{
	  Function func = new Function(f_type.toString() , ident.toString());
	  stack.push(func);
	}
	"(" (parameter_declaration() ("," parameter_declaration())*)? ")" "{"
		function_body()
	"}"

	{
		FunctionBody funcB = (FunctionBody)stack.pop();
	  	func.setFunctionBody(funcB);	  		  	
	}
	
	(function())*
	< EOF >
}

void parameter_declaration():
{
    Token ident = null;
    Token type = null;
}
{
	{
	  	ParameterDeclaration parameterDeclaration = new ParameterDeclaration();
	}
  
	type = type() ident = < IDENTIFIER >
	
	{
		parameterDeclaration.setParameterName(ident.toString());
		parameterDeclaration.setType(type.toString());

		Function func = (Function)stack.peek();
		List<ParameterDeclaration> parameterDeclarations = func.getParameterDeclarations();
		parameterDeclarations.add(parameterDeclaration);
		func.setParameterDeclarations(parameterDeclarations);
	}
}

void function_body() :
{
}
{
	{
	    FunctionBody functionBody = new FunctionBody();
	  	ArrayList<VariableDeclaration> variableDeclarations = new ArrayList<VariableDeclaration>();
	  	ArrayList<Statement> statements = new ArrayList<Statement>();	}
	
    ( variable_declaration() ";"
	{
		VariableDeclaration varD = (VariableDeclaration)stack.pop();
		variableDeclarations.add(varD);
	}
    )*
  	( statement() 
  	{
  	  	Statement statement = (Statement)stack.pop();
  	  	statements.add(statement);
  	}
  	)*
	( return_statement()
	{
	  	ReturnStatement rStatement = (ReturnStatement)stack.pop();
	  	statements.add(rStatement);
	}
	)?
	{
	  	functionBody.setVariableDeclarations(variableDeclarations);
	  	functionBody.setStatements(statements);
		stack.push(functionBody);
	}}
void statement() :
{		
}
{
	(		(
			LOOKAHEAD(2)			assignment()
			| function_call()
		) ";"
		| conditional_statement()
		| while_loop()
		| for_loop()  
	)
}

void variable_declaration():
{
  Token t = null;
}
{
  	{
		VariableDeclaration variableDeclaration = new VariableDeclaration();

		ArrayList<Assignment> assignments = new ArrayList<Assignment>();
	}
	t = type() assignment()
	{
		Assignment assignment = (Assignment)stack.pop();
	  	assignments.add(assignment); 
	}
	("," assignment()
	{
	  	assignment = (Assignment)stack.pop();
	  	assignments.add(assignment); 
	}
	)*
	{
		
		variableDeclaration.setAssignments(assignments);
		variableDeclaration.setType(t.toString());
		
		stack.push(variableDeclaration);
	}
}

Token litteral_value() :
{
  Token t = null;
}
{
	(		t = < INTEGER >
		| t = < DECIMAL >
		| t = boolean_value()
	)
	{
  			  return t;
	}	
}

Token boolean_value() :
{
  Token t = null;
}
{
	( t = < TRUE > | t = < FALSE > )
	{
	  	return t;
	}
}

Token type() :
{
  Token tok=null;
}
{
	(
		
		tok = < INTEGER_TYPE >
		| tok = < DECIMAL_TYPE >
		| tok = < BOOLEAN >
	)

	{
	  return tok;
	}
}

void conditional_statement():
{
  	ConditionalStatement cStatement = new ConditionalStatement();
  	ArrayList<Statement> ifBody = new ArrayList<Statement>();
  	ArrayList<Statement> elseBody = new ArrayList<Statement>();
}
{
	< IF > "("expression()")"
	{
		Item exp = (Item)stack.pop();
		cStatement.setExpression(exp);
	}
	"{"
	(statement()
		{
			  Statement statement = (Statement)stack.pop();
			  ifBody.add(statement);
		}
	)*
	( LOOKAHEAD(2)
	"}"
	< ELSE >
	"{"
		( statement()
		{
		  	Statement statement = (Statement)stack.pop();
			elseBody.add(statement);
		}
		)*
	)?
	"}"

	{
	  	cStatement.setIfBody(ifBody);
	  	cStatement.setElseBody(elseBody);
		stack.push(cStatement);
	}

}

void while_loop():
{
  	WhileLoop whileLoop = new WhileLoop();
	Item item;
	ArrayList<Statement> body = new ArrayList<Statement>();
}
{
	< WHILE > "(" expression() ")"
	{
		item = (Item)stack.pop();
		whileLoop.setExpression(item);
	}
	"{"
		(statement()
			{
			  	Statement statement = (Statement)stack.pop();
			  	body.add(statement);
			}
		)*
	"}"
	{
	  	whileLoop.setBody(body);
		stack.push(whileLoop);
	}
}

void for_loop():
{
  	ForLoop forLoop = new ForLoop();
  	ArrayList<Statement> body = new ArrayList<Statement>();  	
}
{
	< FOR > "(" (assignment()
	{
	  	forLoop.setStartAssignment((Assignment)stack.pop());
	}
	)? ";" (expression()
	{
	  	forLoop.setExpression((Item)stack.pop());
	}
	)? ";" (assignment()
	{
	  	forLoop.setIterationAssignment((Assignment)stack.pop());
	}
	)?  ")" "{" (statement()
	{
	  	body.add((Statement)stack.pop());
	}
	)* "}"
	{
	  	forLoop.setBody(body);
	  	stack.push(forLoop);
	}
}
void expression():
{
  	LogExpression lExp = new LogExpression();
  	String connector;
  	Item exp;
}
{
 	comparaison_expression() // A > B
 	(
		{
	 	   exp = (Item)stack.pop();
	 	   lExp.setGauche(exp);
	 	}
		
	 	connector = logical_connector()
	 	{
			lExp.setConnector(connector);	
	 	}
	 	
	 	comparaison_expression()
		{
	  		exp = (Item)stack.pop();
	 	  	lExp.setDroite(exp);
	 	  	stack.push(lExp);
		}

 	 )* // (a > b) || (b > a)
}

void comparaison_expression():
{
  	ComparaisonExpression cExpression = new ComparaisonExpression();
  	String operator;
}
{
	 arithmetic_expression_priority_low() // a ou a+b ou a-b ou a*b ou a/b
	 (
	  	{ 	  
	  	    Item expGauche = (Item)stack.pop();
	  		cExpression.setGauche(expGauche);
		}
		
	   	operator = comparaison_operator()
	   	{
	     	cExpression.setOperator(operator);
	   	}
	   	
	   	arithmetic_expression_priority_low() // a > b ou a+b < a/b etc.
		{
			Item expDroite = (Item)stack.pop();		
	   		cExpression.setDroite(expDroite);
	   		stack.push(cExpression);  
		}
	 )*
}


void arithmetic_expression_priority_low():
{
  	String operator;
}
{
	 arithmetic_expression() // a/b ou a*b ou a
	 (
	    {
  			LowPriorityArithmeticExpression lowExpression = new LowPriorityArithmeticExpression ();
  			Item expression = (Item)stack.pop();
  			lowExpression.setGauche(expression);
	    }
	    
	   	operator = arithmetic_operation_priority_low() arithmetic_expression() // a/b + a*b ou a/b - a*b ou a+b
	   	{
	   	  	expression = (Item)stack.pop();
	   	  	lowExpression.setDroite(expression);
			lowExpression.setOperator(operator);
	   	  	
	  		stack.push(lowExpression);
	 	}
	 )*
}

void arithmetic_expression():
{
  	String operator;
}
{	
	unary_expression() // a ou a++ ou !a etc.
	(
	    {
	  		ArithmeticExpression aExpression = new ArithmeticExpression ();
	  		Item item = (Item)stack.pop();
	  		aExpression.setGauche(item);
	    }
	    
	  	operator = arithmetic_operation() unary_expression() // a/b ou a*b
	  	
	  	{
	  		item = (Item)stack.pop();
			aExpression.setDroite(item);

			aExpression.setOperator(operator);
			stack.push(aExpression);
	 	}
	)*
}

void unary_expression():
{
  	UnaryExpression uExpression = null;
  	String operator;
}
{
	(operator = unary_operator() // ++ ou -- ou ! avec le terme
	{
  		uExpression = new UnaryExpression();
		uExpression.setOperator(operator);
	}
	)? term() // a
	{
	  	if(uExpression != null)
	  	{
    		Term t = (Term)stack.pop();
    		uExpression.setTerm(t);
	    	stack.push(uExpression);
	 	}  
	}
}

void term():
{
  	Term myTerm = new Term ();
}
{
	(	  value()	| "("expression()")"
	)
	{
		Object val = (Object)stack.pop();
		myTerm.setValue(val);
		stack.push(myTerm);
	}
}

String unary_operator():
{
  Token t = null;
}
{
  	(		t = < PREFIX_INCREMENT >
		| t = < PREFIX_DECREMENT >
		| t = < NOT >
	)
	{
  		return t.toString();
	}
}

void value():
{
  Token t = null ;
}
{
	( 
		LOOKAHEAD(2) function_call()
		| t = < IDENTIFIER >
		{
		 	 stack.push(t.toString());
		}
		| t = litteral_value()
		{
		 	 stack.push(t.toString());
		}
	)
}

String arithmetic_operation():
{
  Token t = null;
}
{	
	( t = < MULTIPLY > | t = < DIVIDE > | t = < MODULO > )
	{
		return t.toString();
	}
}

String arithmetic_operation_priority_low():
{
    Token t = null;
}
{	
	( t = < PLUS > | t = < MINUS > )
	{
		return t.toString();
	}
}

String comparaison_operator():
{
  	Token operator=null;
}
{
  	(operator= < EQUAL > | operator= < NOT_EQUAL > | operator= < GREATER > | operator = < GREATER_OR_EQUAL > | operator = < LOWER > | operator= < LOWER_OR_EQUAL > )
  	
  	{
				return operator.toString();
  	}
}

String logical_connector():
{
  Token t = null;
}
{
	 ( t = < AND > | t = < OR > )
	 {
	   	return t.toString();
	 }
}

void function_call():
{
  	Token identifier = null;
  	FunctionCall fCall = new FunctionCall();
  	ArrayList<Item> parameters = new ArrayList<Item>();
}
{
	identifier = < IDENTIFIER > "(" (expression()
	{
		Item e = (Item)stack.pop();
		parameters.add(e);
	}
	("," expression()
	{
	  	e = (Item)stack.pop();
		parameters.add(e);
	}
	)*)? ")"
	{
	 	fCall.setIdentifier(identifier.toString());
	 	fCall.setParameters(parameters);
	 	stack.push(fCall); 
	}
}

void assignment():
{
  Token identifier = null;
  Token assign = null;
  
}
{
	{
	  Assignment assignment = new Assignment();
	}
    identifier = < IDENTIFIER > assign = < ASSIGN > expression()
    {
	      Item item = (Item)stack.pop();
	            
	      assignment.setIdentifier(identifier.toString());
	      assignment.setAssign(assign.toString());
		  assignment.setExpression(item);
	
		  stack.push(assignment);
	}
}

void return_statement():
{
 	ReturnStatement rStatement = new ReturnStatement();
}
{
	< RETURN > expression() ";"
	{
		Item exp = (Item)stack.pop();
		rStatement.setExpression(exp);
		stack.push(rStatement);
		
	}
}