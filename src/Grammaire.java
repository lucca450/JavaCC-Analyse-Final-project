/* Generated By:JavaCC: Do not edit this line. Grammaire.java */
import java.io.*;
import ast.*;
import java.util.Stack;
import java.util.ArrayList;
import java.util.List;
import java.lang.Math;
import java.util.Random;

public class Grammaire implements GrammaireConstants {
  static Stack stack = new Stack();
  static int uniqueID = 0;

  public static void main(String args []) throws ParseException
  {
    try {
            InputStream inputStream = new FileInputStream(new File("test.txt"));
            Grammaire parser = new Grammaire(inputStream);

            parser.function();

                Function myFunction = (Function)stack.peek();








         } catch(IOException exception) {
                exception.printStackTrace();
         }
  }

  final public void function() throws ParseException {
  Token ident = null;
  Token f_type = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_TYPE:
    case DECIMAL_TYPE:
    case BOOLEAN:
      f_type = type();
      break;
    case VOID:
      f_type = jj_consume_token(VOID);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    ident = jj_consume_token(IDENTIFIER);
          Function func = new Function(f_type.toString() , ident.toString());
          stack.push(func);
    jj_consume_token(42);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_TYPE:
    case DECIMAL_TYPE:
    case BOOLEAN:
      parameter_declaration();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 43:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        jj_consume_token(43);
        parameter_declaration();
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(44);
    jj_consume_token(45);
    function_body();
    jj_consume_token(46);
                FunctionBody funcB = (FunctionBody)stack.pop();
                func.setFunctionBody(funcB);


                /*Boolean ok = false;
		while(!ok){
        	BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)); 

         	System.out.println("Voulez-vous afficher l'AST ? (o/n)");
        	String answer = reader.readLine(); 

			ok = answer == "o" || answer == "n";
			if(!ok) {
				System.out.prinln("Entrée invalide");
			}
		}
		
		if(answer == "o") {*/
                        //func.accept(new VisitorPrint());
                //}


                DataGenerator dG = new DataGenerator(func);

                ArrayList<Execution> executions = dG.GenerateData();

                int nbWorked = 0;

                for(Execution e : executions) {
                        Context context = dG.GenerateContext(e);
                        context.setResultType(func.getType());

                        Object result = func.interpret(context);

                        if(!context.getHasError()) {
                                nbWorked ++;




                        }

                        int allo = 100;
                }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_TYPE:
      case DECIMAL_TYPE:
      case BOOLEAN:
      case VOID:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      function();
    }
    jj_consume_token(0);
  }

  final public void parameter_declaration() throws ParseException {
    Token ident = null;
    Token type = null;
                ParameterDeclaration parameterDeclaration = new ParameterDeclaration();
    type = type();
    ident = jj_consume_token(IDENTIFIER);
                parameterDeclaration.setParameterName(ident.toString());
                parameterDeclaration.setType(type.toString());

                Function func = (Function)stack.peek();
                List<ParameterDeclaration> parameterDeclarations = func.getParameterDeclarations();
                parameterDeclarations.add(parameterDeclaration);
                func.setParameterDeclarations(parameterDeclarations);
  }

  final public void function_body() throws ParseException {
            FunctionBody functionBody = new FunctionBody();
                ArrayList<VariableDeclaration> variableDeclarations = new ArrayList<VariableDeclaration>();
                ArrayList<Statement> statements = new ArrayList<Statement>();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_TYPE:
      case DECIMAL_TYPE:
      case BOOLEAN:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      variable_declaration();
      jj_consume_token(47);
                VariableDeclaration varD = (VariableDeclaration)stack.pop();
                variableDeclarations.add(varD);
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      statement();
                Statement statement = (Statement)stack.pop();
                statements.add(statement);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
      return_statement();
                ReturnStatement rStatement = (ReturnStatement)stack.pop();
                statements.add(rStatement);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
                functionBody.setVariableDeclarations(variableDeclarations);
                functionBody.setStatements(statements);
                stack.push(functionBody);
  }

  final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      if (jj_2_1(2)) {
        assignment();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          function_call();
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(47);
      break;
    case IF:
      conditional_statement();
      break;
    case WHILE:
      while_loop();
      break;
    case FOR:
      for_loop();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void variable_declaration() throws ParseException {
  Token t = null;
                VariableDeclaration variableDeclaration = new VariableDeclaration();

                ArrayList<Assignment> assignments = new ArrayList<Assignment>();
    t = type();
    assignment();
                Assignment assignment = (Assignment)stack.pop();
                assignments.add(assignment);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      jj_consume_token(43);
      assignment();
                assignment = (Assignment)stack.pop();
                assignments.add(assignment);
    }
                variableDeclaration.setAssignments(assignments);
                variableDeclaration.setType(t.toString());

                stack.push(variableDeclaration);
  }

  final public Token litteral_value() throws ParseException {
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
      break;
    case DECIMAL:
      t = jj_consume_token(DECIMAL);
      break;
    case TRUE:
    case FALSE:
      t = boolean_value();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token boolean_value() throws ParseException {
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token type() throws ParseException {
  Token tok=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_TYPE:
      tok = jj_consume_token(INTEGER_TYPE);
      break;
    case DECIMAL_TYPE:
      tok = jj_consume_token(DECIMAL_TYPE);
      break;
    case BOOLEAN:
      tok = jj_consume_token(BOOLEAN);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return tok;}
    throw new Error("Missing return statement in function");
  }

  final public void conditional_statement() throws ParseException {
        ConditionalStatement cStatement = new ConditionalStatement();
        ArrayList<Statement> ifBody = new ArrayList<Statement>();
        ArrayList<Statement> elseBody = new ArrayList<Statement>();
    jj_consume_token(IF);
    jj_consume_token(42);
    expression();
    jj_consume_token(44);
                Item exp = (Item)stack.pop();
                cStatement.setExpression(exp);
    jj_consume_token(45);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      statement();
                          Statement statement = (Statement)stack.pop();
                          ifBody.add(statement);
    }
    if (jj_2_2(2)) {
      jj_consume_token(46);
      jj_consume_token(ELSE);
      jj_consume_token(45);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case FOR:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_7;
        }
        statement();
                        Statement statement = (Statement)stack.pop();
                        elseBody.add(statement);
      }
    } else {
      ;
    }
    jj_consume_token(46);
                cStatement.setIfBody(ifBody);
                cStatement.setElseBody(elseBody);
                stack.push(cStatement);
  }

  final public void while_loop() throws ParseException {
        WhileLoop whileLoop = new WhileLoop();
        Item item;
        ArrayList<Statement> body = new ArrayList<Statement>();
    jj_consume_token(WHILE);
    jj_consume_token(42);
    expression();
    jj_consume_token(44);
                item = (Item)stack.pop();
                whileLoop.setExpression(item);
    jj_consume_token(45);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
      statement();
                                Statement statement = (Statement)stack.pop();
                                body.add(statement);
    }
    jj_consume_token(46);
                whileLoop.setBody(body);
                stack.push(whileLoop);
  }

  final public void for_loop() throws ParseException {
        ForLoop forLoop = new ForLoop();
        ArrayList<Statement> body = new ArrayList<Statement>();
    jj_consume_token(FOR);
    jj_consume_token(42);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      assignment();
                forLoop.setStartAssignment((Assignment)stack.pop());
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(47);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case PREFIX_INCREMENT:
    case PREFIX_DECREMENT:
    case TRUE:
    case FALSE:
    case INTEGER:
    case DECIMAL:
    case IDENTIFIER:
    case 42:
      expression();
                forLoop.setExpression((Item)stack.pop());
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(47);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      assignment();
                forLoop.setIterationAssignment((Assignment)stack.pop());
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(44);
    jj_consume_token(45);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      statement();
                body.add((Statement)stack.pop());
    }
    jj_consume_token(46);
                forLoop.setBody(body);
                stack.push(forLoop);
  }

  final public void expression() throws ParseException {
        LogExpression lExp = new LogExpression();
        String connector;
        Item exp;
    comparaison_expression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_10;
      }
                   exp = (Item)stack.pop();
                   lExp.setGauche(exp);
      connector = logical_connector();
                        lExp.setConnector(connector);
      comparaison_expression();
                        exp = (Item)stack.pop();
                        lExp.setDroite(exp);
                        stack.push(lExp);
    }
  }

  final public void comparaison_expression() throws ParseException {
        ComparaisonExpression cExpression = new ComparaisonExpression();
        String operator;
    arithmetic_expression_priority_low();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case NOT_EQUAL:
      case GREATER:
      case GREATER_OR_EQUAL:
      case LOWER:
      case LOWER_OR_EQUAL:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_11;
      }
                    Item expGauche = (Item)stack.pop();
                        cExpression.setGauche(expGauche);
      operator = comparaison_operator();
                cExpression.setOperator(operator);
      arithmetic_expression_priority_low();
                        Item expDroite = (Item)stack.pop();
                        cExpression.setDroite(expDroite);
                        stack.push(cExpression);
    }
  }

  final public void arithmetic_expression_priority_low() throws ParseException {
        String operator;
    arithmetic_expression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_12;
      }
                        LowPriorityArithmeticExpression lowExpression = new LowPriorityArithmeticExpression ();
                        Item expression = (Item)stack.pop();
                        lowExpression.setGauche(expression);
      operator = arithmetic_operation_priority_low();
      arithmetic_expression();
                        expression = (Item)stack.pop();
                        lowExpression.setDroite(expression);
                        lowExpression.setOperator(operator);

                        stack.push(lowExpression);
    }
  }

  final public void arithmetic_expression() throws ParseException {
        String operator;
    unary_expression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
      case MODULO:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_13;
      }
                        ArithmeticExpression aExpression = new ArithmeticExpression ();
                        Item item = (Item)stack.pop();
                        aExpression.setGauche(item);
      operator = arithmetic_operation();
      unary_expression();
                        item = (Item)stack.pop();
                        aExpression.setDroite(item);

                        aExpression.setOperator(operator);
                        stack.push(aExpression);
    }
  }

  final public void unary_expression() throws ParseException {
        UnaryExpression uExpression = null;
        String operator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case PREFIX_INCREMENT:
    case PREFIX_DECREMENT:
      operator = unary_operator();
                uExpression = new UnaryExpression();
                uExpression.setOperator(operator);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    term();
                if(uExpression != null)
                {
                Term t = (Term)stack.pop();
                uExpression.setTerm(t);
                stack.push(uExpression);
                }
  }

  final public void term() throws ParseException {
        Term myTerm = new Term ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case INTEGER:
    case DECIMAL:
    case IDENTIFIER:
      value();
      break;
    case 42:
      jj_consume_token(42);
      expression();
      jj_consume_token(44);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                Object val = (Object)stack.pop();
                myTerm.setValue(val);
                stack.push(myTerm);
  }

  final public String unary_operator() throws ParseException {
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PREFIX_INCREMENT:
      t = jj_consume_token(PREFIX_INCREMENT);
      break;
    case PREFIX_DECREMENT:
      t = jj_consume_token(PREFIX_DECREMENT);
      break;
    case NOT:
      t = jj_consume_token(NOT);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  final public void value() throws ParseException {
  Token t = null ;
    if (jj_2_3(2)) {
      function_call();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                         stack.push(t.toString());
        break;
      case TRUE:
      case FALSE:
      case INTEGER:
      case DECIMAL:
        t = litteral_value();
                         stack.push(t.toString());
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public String arithmetic_operation() throws ParseException {
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
      t = jj_consume_token(MULTIPLY);
      break;
    case DIVIDE:
      t = jj_consume_token(DIVIDE);
      break;
    case MODULO:
      t = jj_consume_token(MODULO);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String arithmetic_operation_priority_low() throws ParseException {
    Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String comparaison_operator() throws ParseException {
        Token operator=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      operator = jj_consume_token(EQUAL);
      break;
    case NOT_EQUAL:
      operator = jj_consume_token(NOT_EQUAL);
      break;
    case GREATER:
      operator = jj_consume_token(GREATER);
      break;
    case GREATER_OR_EQUAL:
      operator = jj_consume_token(GREATER_OR_EQUAL);
      break;
    case LOWER:
      operator = jj_consume_token(LOWER);
      break;
    case LOWER_OR_EQUAL:
      operator = jj_consume_token(LOWER_OR_EQUAL);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                {if (true) return operator.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String logical_connector() throws ParseException {
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      t = jj_consume_token(AND);
      break;
    case OR:
      t = jj_consume_token(OR);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  final public void function_call() throws ParseException {
        Token identifier = null;
        FunctionCall fCall = new FunctionCall();
        ArrayList<Item> parameters = new ArrayList<Item>();
    identifier = jj_consume_token(IDENTIFIER);
    jj_consume_token(42);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case PREFIX_INCREMENT:
    case PREFIX_DECREMENT:
    case TRUE:
    case FALSE:
    case INTEGER:
    case DECIMAL:
    case IDENTIFIER:
    case 42:
      expression();
                Item e = (Item)stack.pop();
                parameters.add(e);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 43:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_14;
        }
        jj_consume_token(43);
        expression();
                e = (Item)stack.pop();
                parameters.add(e);
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(44);
                fCall.setIdentifier(identifier.toString());
                fCall.setParameters(parameters);
                stack.push(fCall);
  }

  final public void assignment() throws ParseException {
  Token identifier = null;
  Token assign = null;
          Assignment assignment = new Assignment();
    identifier = jj_consume_token(IDENTIFIER);
    assign = jj_consume_token(ASSIGN);
    expression();
              Item item = (Item)stack.pop();

              assignment.setIdentifier(identifier.toString());
              assignment.setAssign(assign.toString());
                  assignment.setExpression(item);

                  stack.push(assignment);
  }

  final public void return_statement() throws ParseException {
        ReturnStatement rStatement = new ReturnStatement();
    jj_consume_token(RETURN);
    expression();
    jj_consume_token(47);
                Item exp = (Item)stack.pop();
                rStatement.setExpression(exp);
                stack.push(rStatement);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(46)) return true;
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GrammaireTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x1a000000,0x80000000,0x0,0x1a000000,0x0,0x60000000,0x60000000,0x0,0x1a000000,0x1a000000,0x1a000000,0x0,0x61c00000,0x0,0x1a000000,0x300000,0xfc000,0x300,0x1c00,0x1c00000,0x60000000,0x1c00000,0x60000000,0x1c00,0x300,0xfc000,0x300000,0x0,0x61c00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1e,0x800,0xe,0x1e,0xe,0x200,0x0,0x200,0x200,0x800,0x180,0x0,0xe,0x200,0x200,0x200,0x200,0x780,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x780,0x0,0x380,0x0,0x0,0x0,0x0,0x800,0x780,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Grammaire(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Grammaire(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GrammaireTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Grammaire(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GrammaireTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Grammaire(GrammaireTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GrammaireTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
