/* Generated By:JavaCC: Do not edit this line. GrammaireConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GrammaireConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int PLUS = 8;
  /** RegularExpression Id. */
  int MINUS = 9;
  /** RegularExpression Id. */
  int MULTIPLY = 10;
  /** RegularExpression Id. */
  int DIVIDE = 11;
  /** RegularExpression Id. */
  int MODULO = 12;
  /** RegularExpression Id. */
  int ASSIGN = 13;
  /** RegularExpression Id. */
  int EQUAL = 14;
  /** RegularExpression Id. */
  int NOT_EQUAL = 15;
  /** RegularExpression Id. */
  int GREATER = 16;
  /** RegularExpression Id. */
  int GREATER_OR_EQUAL = 17;
  /** RegularExpression Id. */
  int LOWER = 18;
  /** RegularExpression Id. */
  int LOWER_OR_EQUAL = 19;
  /** RegularExpression Id. */
  int AND = 20;
  /** RegularExpression Id. */
  int OR = 21;
  /** RegularExpression Id. */
  int NOT = 22;
  /** RegularExpression Id. */
  int PREFIX_INCREMENT = 23;
  /** RegularExpression Id. */
  int PREFIX_DECREMENT = 24;
  /** RegularExpression Id. */
  int IF = 25;
  /** RegularExpression Id. */
  int ELSE = 26;
  /** RegularExpression Id. */
  int WHILE = 27;
  /** RegularExpression Id. */
  int FOR = 28;
  /** RegularExpression Id. */
  int TRUE = 29;
  /** RegularExpression Id. */
  int FALSE = 30;
  /** RegularExpression Id. */
  int RETURN = 31;
  /** RegularExpression Id. */
  int NEW = 32;
  /** RegularExpression Id. */
  int INTEGER_TYPE = 33;
  /** RegularExpression Id. */
  int DECIMAL_TYPE = 34;
  /** RegularExpression Id. */
  int BOOLEAN = 35;
  /** RegularExpression Id. */
  int VOID = 36;
  /** RegularExpression Id. */
  int DIGIT = 37;
  /** RegularExpression Id. */
  int LETTER = 38;
  /** RegularExpression Id. */
  int INTEGER = 39;
  /** RegularExpression Id. */
  int DECIMAL = 40;
  /** RegularExpression Id. */
  int IDENTIFIER = 41;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"//\"",
    "<SINGLE_LINE_COMMENT>",
    "<token of kind 7>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"==\"",
    "\"<>\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"++\"",
    "\"--\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"for\"",
    "\"TRUE\"",
    "\"FALSE\"",
    "\"return\"",
    "\"new\"",
    "\"int\"",
    "\"double\"",
    "\"bool\"",
    "\"void\"",
    "<DIGIT>",
    "<LETTER>",
    "<INTEGER>",
    "<DECIMAL>",
    "<IDENTIFIER>",
    "\"(\"",
    "\",\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
  };

}
